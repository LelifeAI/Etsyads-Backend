import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import os
from dotenv import load_dotenv
from itsdangerous import URLSafeTimedSerializer, SignatureExpired, BadSignature
from passlib.context import CryptContext

# Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv(dotenv_path="C:/Users/QUANG LE/AppData/Local/Programs/Python/Python313/backend/etsyads/.env")

# L·∫•y c·∫•u h√¨nh SMTP t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
SMTP_SERVER = os.getenv("SMTP_SERVER", "smtp.gmail.com")
SMTP_PORT = int(os.getenv("SMTP_PORT", 587))
SMTP_USERNAME = os.getenv("SMTP_USERNAME", "your-email@gmail.com")
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD", "your-email-password")
SECRET_KEY = os.getenv("SECRET_KEY", "your-secret-key")

# C·∫•u h√¨nh b·∫£o m·∫≠t m·∫≠t kh·∫©u
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# Ki·ªÉm tra xem bi·∫øn m√¥i tr∆∞·ªùng ƒë√£ ƒë∆∞·ª£c load ch∆∞a
if not SMTP_SERVER or not SMTP_PORT or not SMTP_USERNAME or not SMTP_PASSWORD:
    raise ValueError("‚ùå Thi·∫øu th√¥ng tin c·∫•u h√¨nh SMTP. Vui l√≤ng ki·ªÉm tra file .env!")

# üëâ **H√†m bƒÉm m·∫≠t kh·∫©u**
def hash_password(password: str) -> str:
    """BƒÉm m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u v√†o database."""
    return pwd_context.hash(password)

# üëâ **H√†m t·∫°o reset token**
def generate_reset_token(email: str) -> str:
    """T·∫°o token kh√¥i ph·ª•c m·∫≠t kh·∫©u."""
    serializer = URLSafeTimedSerializer(SECRET_KEY)
    return serializer.dumps(email, salt="password-reset-salt")

# üëâ **H√†m x√°c th·ª±c token**
def verify_token(token: str) -> str | None:
    """
    Gi·∫£i m√£ token kh√¥i ph·ª•c m·∫≠t kh·∫©u.
    Args:
        token (str): Token c·∫ßn gi·∫£i m√£.
    Returns:
        str: Email n·∫øu h·ª£p l·ªá, None n·∫øu kh√¥ng h·ª£p l·ªá.
    """
    serializer = URLSafeTimedSerializer(SECRET_KEY)
    try:
        email = serializer.loads(token, salt="password-reset-salt", max_age=3600)  # Token h·ª£p l·ªá trong 1 gi·ªù
        return email
    except (SignatureExpired, BadSignature):
        return None

# üëâ **H√†m g·ª≠i email**
def send_email(to_email: str, subject: str, body: str):
    """
    G·ª≠i email s·ª≠ d·ª•ng SMTP.
    Args:
        to_email (str): ƒê·ªãa ch·ªâ email nh·∫≠n.
        subject (str): Ti√™u ƒë·ªÅ email.
        body (str): N·ªôi dung email.
    """
    try:
        # Thi·∫øt l·∫≠p n·ªôi dung email
        msg = MIMEMultipart()
        msg["From"] = SMTP_USERNAME
        msg["To"] = to_email
        msg["Subject"] = subject
        msg.attach(MIMEText(body, "plain"))

        # K·∫øt n·ªëi SMTP v√† g·ª≠i email
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()  # B·∫Øt ƒë·∫ßu k·∫øt n·ªëi TLS
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.sendmail(SMTP_USERNAME, to_email, msg.as_string())

        print(f"‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng ƒë·∫øn {to_email}")
    except Exception as e:
        print(f"‚ùå L·ªói khi g·ª≠i email: {e}")
        raise  # Raise l·∫°i l·ªói ƒë·ªÉ h·ªá th·ªëng c√≥ th·ªÉ x·ª≠ l√Ω
